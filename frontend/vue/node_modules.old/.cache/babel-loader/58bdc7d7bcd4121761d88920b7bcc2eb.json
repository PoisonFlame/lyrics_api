{"remainingRequest":"/home/robby/docker/lyrics_api/app/node_modules/babel-loader/lib/index.js!/home/robby/docker/lyrics_api/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/robby/docker/lyrics_api/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robby/docker/lyrics_api/app/node_modules/@carbon/vue/src/components/cv-inline-loading/cv-inline-loading.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/robby/docker/lyrics_api/app/node_modules/@carbon/vue/src/components/cv-inline-loading/cv-inline-loading.vue","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IFNUQVRFUyB9IGZyb20gJy4vY29uc3RzJzsKaW1wb3J0IEVycm9yRmlsbGVkMTYgZnJvbSAnQGNhcmJvbi9pY29ucy12dWUvbGliL2Vycm9yLS1maWxsZWQvMTYnOwppbXBvcnQgQ2hlY2ttYXJrRmlsbGVkMTYgZnJvbSAnQGNhcmJvbi9pY29ucy12dWUvbGliL2NoZWNrbWFyay0tZmlsbGVkLzE2JzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDdklubGluZUxvYWRpbmcnLAogIGNvbXBvbmVudHM6IHsKICAgIEVycm9yRmlsbGVkMTY6IEVycm9yRmlsbGVkMTYsCiAgICBDaGVja21hcmtGaWxsZWQxNjogQ2hlY2ttYXJrRmlsbGVkMTYKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLlNUQVRFUyA9IFNUQVRFUzsKICB9LAogIHByb3BzOiB7CiAgICBhY3RpdmU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLAogICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWwpIHsKICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHsKICAgICAgICAgIGNvbnNvbGUud2FybignQ3ZJbmxpbmVMb2FkaW5nOiBhY3RpdmUgcHJvcCBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBzdGF0ZSBwcm9wJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIGVuZGluZ1RleHQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnTG9hZCBlbmRpbmcuLi4nCiAgICB9LAogICAgZXJyb3JUZXh0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ0xvYWRpbmcgZGF0YSBmYWlsZWQuJwogICAgfSwKICAgIGxvYWRpbmdUZXh0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ0xvYWRpbmcgZGF0YS4uLicKICAgIH0sCiAgICBsb2FkZWRUZXh0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ0RhdGEgbG9hZGVkLicKICAgIH0sCiAgICBzdGF0ZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCwKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsKSB7CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKFNUQVRFUykuc29tZShmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiBTVEFURVNbc3RhdGVdID09PSB2YWwudG9Mb3dlckNhc2UoKTsKICAgICAgICB9KSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkN2SW5saW5lTG9hZGluZzogVmFsaWQgc3RhdGVzIGFyZSAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShPYmplY3QudmFsdWVzKFNUQVRFUykpKSk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgaW50ZXJuYWxTdGF0ZTogZnVuY3Rpb24gaW50ZXJuYWxTdGF0ZSgpIHsKICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRvTG93ZXJDYXNlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlID8gU1RBVEVTLkxPQURJTkcgOiBTVEFURVMuTE9BREVEOwogICAgICB9CiAgICB9LAogICAgc3RhdGVUZXh0OiBmdW5jdGlvbiBzdGF0ZVRleHQoKSB7CiAgICAgIHN3aXRjaCAodGhpcy5pbnRlcm5hbFN0YXRlKSB7CiAgICAgICAgY2FzZSBTVEFURVMuTE9BREVEOgogICAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVkVGV4dDsKCiAgICAgICAgY2FzZSBTVEFURVMuRVJST1I6CiAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvclRleHQ7CgogICAgICAgIGNhc2UgU1RBVEVTLkVORElORzoKICAgICAgICAgIHJldHVybiB0aGlzLmVuZGluZ1RleHQ7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkaW5nVGV4dDsKICAgICAgfQogICAgfSwKICAgIENPTlNUUzogZnVuY3Rpb24gQ09OU1RTKCkgewogICAgICByZXR1cm4gewogICAgICAgIFNUQVRFUzogU1RBVEVTCiAgICAgIH07CiAgICB9CiAgfSwKICBDT05TVFM6IGZ1bmN0aW9uIENPTlNUUygpIHsKICAgIHJldHVybiB7CiAgICAgIFNUQVRFUzogU1RBVEVTCiAgICB9OwogIH0KfTs="},{"version":3,"sources":["cv-inline-loading.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,MAAA,QAAA,UAAA;AACA,OAAA,aAAA,MAAA,wCAAA;AACA,OAAA,iBAAA,MAAA,4CAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,aAAA,EAAA,aAAA;AAAA,IAAA,iBAAA,EAAA;AAAA,GAFA;AAGA,EAAA,OAHA,qBAGA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,GALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA,SAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,GAAA,EAAA;AACA,YAAA,GAAA,KAAA,SAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,aAAA,EAAA;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,iEAAA;AACA;;AACA,eAAA,IAAA;AACA;AARA,KADA;AAWA,IAAA,UAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAXA;AAYA,IAAA,SAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAZA;AAaA,IAAA,WAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAbA;AAcA,IAAA,UAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAdA;AAeA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,SAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,KAAA;AAAA,iBAAA,MAAA,CAAA,KAAA,CAAA,KAAA,GAAA,CAAA,WAAA,EAAA;AAAA,SAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA,SAFA,MAEA;AACA,UAAA,OAAA,CAAA,KAAA,6CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AACA,iBAAA,KAAA;AACA;AACA;AAVA;AAfA,GANA;AAkCA,EAAA,QAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,UAAA,KAAA,KAAA,KAAA,SAAA,EAAA;AACA,eAAA,KAAA,KAAA,CAAA,WAAA,EAAA;AACA,OAFA,MAEA;AACA,eAAA,KAAA,MAAA,GAAA,MAAA,CAAA,OAAA,GAAA,MAAA,CAAA,MAAA;AACA;AACA,KAPA;AAQA,IAAA,SARA,uBAQA;AACA,cAAA,KAAA,aAAA;AACA,aAAA,MAAA,CAAA,MAAA;AACA,iBAAA,KAAA,UAAA;;AACA,aAAA,MAAA,CAAA,KAAA;AACA,iBAAA,KAAA,SAAA;;AACA,aAAA,MAAA,CAAA,MAAA;AACA,iBAAA,KAAA,UAAA;;AACA;AACA,iBAAA,KAAA,WAAA;AARA;AAUA,KAnBA;AAoBA,IAAA,MApBA,oBAoBA;AACA,aAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;AACA;AAtBA,GAlCA;AA0DA,EAAA,MA1DA,oBA0DA;AACA,WAAA;AAAA,MAAA,MAAA,EAAA;AAAA,KAAA;AACA;AA5DA,CAAA","sourcesContent":["<template>\n  <div data-inline-loading class=\"bx--inline-loading\" role=\"alert\" aria-live=\"assertive\">\n    <div class=\"bx--inline-loading__animation\" :class=\"{ 'bx--loading--stop': internalState === STATES.ENDING }\">\n      <div\n        v-show=\"internalState === STATES.LOADING || internalState === STATES.ENDING\"\n        class=\"bx--loading bx--loading--small\"\n      >\n        <svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n          <circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"26.8125\" />\n          <circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"26.8125\" />\n        </svg>\n      </div>\n      <CheckmarkFilled16 :hidden=\"internalState !== STATES.LOADED\" class=\"bx--inline-loading__checkmark-container\" />\n      <ErrorFilled16 :hidden=\"internalState !== STATES.ERROR\" class=\"bx--inline-loading--error\" />\n    </div>\n    <p class=\"bx--inline-loading__text\">{{ stateText }}</p>\n  </div>\n</template>\n\n<script>\nimport { STATES } from './consts';\nimport ErrorFilled16 from '@carbon/icons-vue/lib/error--filled/16';\nimport CheckmarkFilled16 from '@carbon/icons-vue/lib/checkmark--filled/16';\n\nexport default {\n  name: 'CvInlineLoading',\n  components: { ErrorFilled16, CheckmarkFilled16 },\n  created() {\n    this.STATES = STATES;\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: undefined,\n      validator: val => {\n        if (val !== undefined && process.env.NODE_ENV === 'development') {\n          console.warn('CvInlineLoading: active prop deprecated in favour of state prop');\n        }\n        return true;\n      },\n    },\n    endingText: { type: String, default: 'Load ending...' },\n    errorText: { type: String, default: 'Loading data failed.' },\n    loadingText: { type: String, default: 'Loading data...' },\n    loadedText: { type: String, default: 'Data loaded.' },\n    state: {\n      type: String,\n      default: undefined,\n      validator: val => {\n        if (Object.keys(STATES).some(state => STATES[state] === val.toLowerCase())) {\n          return true;\n        } else {\n          console.error(`CvInlineLoading: Valid states are ${JSON.stringify(Object.values(STATES))}`);\n          return false;\n        }\n      },\n    },\n  },\n  computed: {\n    internalState() {\n      if (this.state !== undefined) {\n        return this.state.toLowerCase();\n      } else {\n        return this.active ? STATES.LOADING : STATES.LOADED;\n      }\n    },\n    stateText() {\n      switch (this.internalState) {\n        case STATES.LOADED:\n          return this.loadedText;\n        case STATES.ERROR:\n          return this.errorText;\n        case STATES.ENDING:\n          return this.endingText;\n        default:\n          return this.loadingText;\n      }\n    },\n    CONSTS() {\n      return { STATES };\n    },\n  },\n  CONSTS() {\n    return { STATES };\n  },\n};\n</script>\n"],"sourceRoot":"node_modules/@carbon/vue/src/components/cv-inline-loading"}]}