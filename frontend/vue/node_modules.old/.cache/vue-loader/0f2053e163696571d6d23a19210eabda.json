{"remainingRequest":"/home/robby/docker/lyrics_api/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robby/docker/lyrics_api/app/node_modules/@carbon/vue/src/components/cv-inline-loading/cv-inline-loading.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/robby/docker/lyrics_api/app/node_modules/@carbon/vue/src/components/cv-inline-loading/cv-inline-loading.vue","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robby/docker/lyrics_api/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFNUQVRFUyB9IGZyb20gJy4vY29uc3RzJzsKaW1wb3J0IEVycm9yRmlsbGVkMTYgZnJvbSAnQGNhcmJvbi9pY29ucy12dWUvbGliL2Vycm9yLS1maWxsZWQvMTYnOwppbXBvcnQgQ2hlY2ttYXJrRmlsbGVkMTYgZnJvbSAnQGNhcmJvbi9pY29ucy12dWUvbGliL2NoZWNrbWFyay0tZmlsbGVkLzE2JzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ3ZJbmxpbmVMb2FkaW5nJywKICBjb21wb25lbnRzOiB7IEVycm9yRmlsbGVkMTYsIENoZWNrbWFya0ZpbGxlZDE2IH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuU1RBVEVTID0gU1RBVEVTOwogIH0sCiAgcHJvcHM6IHsKICAgIGFjdGl2ZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB1bmRlZmluZWQsCiAgICAgIHZhbGlkYXRvcjogdmFsID0+IHsKICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHsKICAgICAgICAgIGNvbnNvbGUud2FybignQ3ZJbmxpbmVMb2FkaW5nOiBhY3RpdmUgcHJvcCBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBzdGF0ZSBwcm9wJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9LAogICAgfSwKICAgIGVuZGluZ1RleHQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnTG9hZCBlbmRpbmcuLi4nIH0sCiAgICBlcnJvclRleHQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnTG9hZGluZyBkYXRhIGZhaWxlZC4nIH0sCiAgICBsb2FkaW5nVGV4dDogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICdMb2FkaW5nIGRhdGEuLi4nIH0sCiAgICBsb2FkZWRUZXh0OiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJ0RhdGEgbG9hZGVkLicgfSwKICAgIHN0YXRlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLAogICAgICB2YWxpZGF0b3I6IHZhbCA9PiB7CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKFNUQVRFUykuc29tZShzdGF0ZSA9PiBTVEFURVNbc3RhdGVdID09PSB2YWwudG9Mb3dlckNhc2UoKSkpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGBDdklubGluZUxvYWRpbmc6IFZhbGlkIHN0YXRlcyBhcmUgJHtKU09OLnN0cmluZ2lmeShPYmplY3QudmFsdWVzKFNUQVRFUykpfWApOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSwKICAgIH0sCiAgfSwKICBjb21wdXRlZDogewogICAgaW50ZXJuYWxTdGF0ZSgpIHsKICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRvTG93ZXJDYXNlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlID8gU1RBVEVTLkxPQURJTkcgOiBTVEFURVMuTE9BREVEOwogICAgICB9CiAgICB9LAogICAgc3RhdGVUZXh0KCkgewogICAgICBzd2l0Y2ggKHRoaXMuaW50ZXJuYWxTdGF0ZSkgewogICAgICAgIGNhc2UgU1RBVEVTLkxPQURFRDoKICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlZFRleHQ7CiAgICAgICAgY2FzZSBTVEFURVMuRVJST1I6CiAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvclRleHQ7CiAgICAgICAgY2FzZSBTVEFURVMuRU5ESU5HOgogICAgICAgICAgcmV0dXJuIHRoaXMuZW5kaW5nVGV4dDsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRoaXMubG9hZGluZ1RleHQ7CiAgICAgIH0KICAgIH0sCiAgICBDT05TVFMoKSB7CiAgICAgIHJldHVybiB7IFNUQVRFUyB9OwogICAgfSwKICB9LAogIENPTlNUUygpIHsKICAgIHJldHVybiB7IFNUQVRFUyB9OwogIH0sCn07Cg=="},{"version":3,"sources":["cv-inline-loading.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cv-inline-loading.vue","sourceRoot":"node_modules/@carbon/vue/src/components/cv-inline-loading","sourcesContent":["<template>\n  <div data-inline-loading class=\"bx--inline-loading\" role=\"alert\" aria-live=\"assertive\">\n    <div class=\"bx--inline-loading__animation\" :class=\"{ 'bx--loading--stop': internalState === STATES.ENDING }\">\n      <div\n        v-show=\"internalState === STATES.LOADING || internalState === STATES.ENDING\"\n        class=\"bx--loading bx--loading--small\"\n      >\n        <svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n          <circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"26.8125\" />\n          <circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"26.8125\" />\n        </svg>\n      </div>\n      <CheckmarkFilled16 :hidden=\"internalState !== STATES.LOADED\" class=\"bx--inline-loading__checkmark-container\" />\n      <ErrorFilled16 :hidden=\"internalState !== STATES.ERROR\" class=\"bx--inline-loading--error\" />\n    </div>\n    <p class=\"bx--inline-loading__text\">{{ stateText }}</p>\n  </div>\n</template>\n\n<script>\nimport { STATES } from './consts';\nimport ErrorFilled16 from '@carbon/icons-vue/lib/error--filled/16';\nimport CheckmarkFilled16 from '@carbon/icons-vue/lib/checkmark--filled/16';\n\nexport default {\n  name: 'CvInlineLoading',\n  components: { ErrorFilled16, CheckmarkFilled16 },\n  created() {\n    this.STATES = STATES;\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: undefined,\n      validator: val => {\n        if (val !== undefined && process.env.NODE_ENV === 'development') {\n          console.warn('CvInlineLoading: active prop deprecated in favour of state prop');\n        }\n        return true;\n      },\n    },\n    endingText: { type: String, default: 'Load ending...' },\n    errorText: { type: String, default: 'Loading data failed.' },\n    loadingText: { type: String, default: 'Loading data...' },\n    loadedText: { type: String, default: 'Data loaded.' },\n    state: {\n      type: String,\n      default: undefined,\n      validator: val => {\n        if (Object.keys(STATES).some(state => STATES[state] === val.toLowerCase())) {\n          return true;\n        } else {\n          console.error(`CvInlineLoading: Valid states are ${JSON.stringify(Object.values(STATES))}`);\n          return false;\n        }\n      },\n    },\n  },\n  computed: {\n    internalState() {\n      if (this.state !== undefined) {\n        return this.state.toLowerCase();\n      } else {\n        return this.active ? STATES.LOADING : STATES.LOADED;\n      }\n    },\n    stateText() {\n      switch (this.internalState) {\n        case STATES.LOADED:\n          return this.loadedText;\n        case STATES.ERROR:\n          return this.errorText;\n        case STATES.ENDING:\n          return this.endingText;\n        default:\n          return this.loadingText;\n      }\n    },\n    CONSTS() {\n      return { STATES };\n    },\n  },\n  CONSTS() {\n    return { STATES };\n  },\n};\n</script>\n"]}]}