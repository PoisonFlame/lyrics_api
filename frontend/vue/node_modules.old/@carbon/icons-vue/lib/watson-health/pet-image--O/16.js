'use strict';

var _rollupPluginBabelHelpers = require('../../_rollupPluginBabelHelpers-00d81fcb.js');
var iconHelpers = require('@carbon/icon-helpers');

var virtual_WatsonHealthPetImageO16 = {
  name: 'WatsonHealthPetImageO16',
  functional: true,
  // We use title as the prop name as it is not a valid attribute for an SVG
  // HTML element
  props: ['title'],
  render: function render(createElement, context) {
    var children = context.children,
        data = context.data,
        listeners = context.listeners,
        props = context.props;
    var attrs = iconHelpers.getAttributes(_rollupPluginBabelHelpers._objectSpread2({
      width: '16',
      height: '16',
      viewBox: '0 0 32 32',
      preserveAspectRatio: 'xMidYMid meet',
      xmlns: 'http://www.w3.org/2000/svg',
      // Special case here, we need to coordinate that we are using title,
      // potentially, to get the right focus attributes
      title: props.title
    }, data.attrs));
    var svgData = {
      attrs: attrs,
      on: listeners
    };

    if (data.staticClass) {
      svgData.class = _rollupPluginBabelHelpers._defineProperty({}, data.staticClass, true);
    }

    if (data.class) {
      svgData.class = svgData.class || {}; // may be no static class

      svgData.class[data.class] = true;
    } // remove style set by getAttributes


    delete svgData.attrs.style; // combine incoming staticStyle, style with default willChange

    svgData.style = _rollupPluginBabelHelpers._objectSpread2({
      willChange: 'transform'
    }, data.staticStyle, {}, data.style);
    return createElement('svg', svgData, [props.title && createElement('title', null, props.title), createElement('rect', {
      attrs: {
        "width": "2",
        "height": "3",
        "x": "11",
        "y": "29"
      }
    }), createElement('rect', {
      attrs: {
        "width": "2",
        "height": "3",
        "x": "11",
        "y": "8"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "2",
        "y": "19"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "2",
        "x": "21",
        "y": "19"
      }
    }), createElement('rect', {
      attrs: {
        "width": "1.98",
        "height": "3",
        "x": "3.59",
        "y": "11.09",
        "transform": "rotate(-45 4.585 12.59)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "1.98",
        "height": "3",
        "x": "18.44",
        "y": "25.93",
        "transform": "rotate(-45 19.429 27.422)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "1.98",
        "x": "3.09",
        "y": "26.44",
        "transform": "rotate(-45 4.591 27.428)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "1.98",
        "x": "17.93",
        "y": "11.59",
        "transform": "rotate(-45 19.423 12.585)"
      }
    }), createElement('path', {
      attrs: {
        "d": "M12,13a7,7,0,1,0,7,7A7,7,0,0,0,12,13Zm0,12a5,5,0,0,1,0-10Z"
      }
    }), createElement('polygon', {
      attrs: {
        "points": "2 2 9 2 9 0 0 0 0 9 2 9 2 2"
      }
    }), createElement('path', {
      attrs: {
        "d": "M30,0H26a2,2,0,0,0-2,2V12a2,2,0,0,0,2,2h4a2,2,0,0,0,2-2V2A2,2,0,0,0,30,0ZM26,12V2h4V12Z"
      }
    }), children]);
  }
};

module.exports = virtual_WatsonHealthPetImageO16;
