'use strict';

var _rollupPluginBabelHelpers = require('../../_rollupPluginBabelHelpers-00d81fcb.js');
var iconHelpers = require('@carbon/icon-helpers');

var virtual_WatsonHealthSmoothingCursor32 = {
  name: 'WatsonHealthSmoothingCursor32',
  functional: true,
  // We use title as the prop name as it is not a valid attribute for an SVG
  // HTML element
  props: ['title'],
  render: function render(createElement, context) {
    var children = context.children,
        data = context.data,
        listeners = context.listeners,
        props = context.props;
    var attrs = iconHelpers.getAttributes(_rollupPluginBabelHelpers._objectSpread2({
      width: '32',
      height: '32',
      viewBox: '0 0 32 32',
      preserveAspectRatio: 'xMidYMid meet',
      xmlns: 'http://www.w3.org/2000/svg',
      // Special case here, we need to coordinate that we are using title,
      // potentially, to get the right focus attributes
      title: props.title
    }, data.attrs));
    var svgData = {
      attrs: attrs,
      on: listeners
    };

    if (data.staticClass) {
      svgData.class = _rollupPluginBabelHelpers._defineProperty({}, data.staticClass, true);
    }

    if (data.class) {
      svgData.class = svgData.class || {}; // may be no static class

      svgData.class[data.class] = true;
    } // remove style set by getAttributes


    delete svgData.attrs.style; // combine incoming staticStyle, style with default willChange

    svgData.style = _rollupPluginBabelHelpers._objectSpread2({
      willChange: 'transform'
    }, data.staticStyle, {}, data.style);
    return createElement('svg', svgData, [props.title && createElement('title', null, props.title), createElement('circle', {
      attrs: {
        "cx": "18",
        "cy": "18",
        "r": "4"
      }
    }), createElement('path', {
      attrs: {
        "d": "M18,30a11.8932,11.8932,0,0,1-4.1035-.72L14.58,27.4A9.9725,9.9725,0,0,0,18,28Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M22.1484,29.2637l-.6914-1.877a9.9556,9.9556,0,0,0,2.9973-1.748l1.2916,1.5268A11.9525,11.9525,0,0,1,22.1484,29.2637Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M10.2893,27.1951A12.0141,12.0141,0,0,1,7.61,24.0078l1.73-1.0029a10.0236,10.0236,0,0,0,2.2347,2.6584Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M28.4133,23.967l-1.7343-.9956a9.9159,9.9159,0,0,0,1.176-3.2641l1.9712.3388A11.8956,11.8956,0,0,1,28.4133,23.967Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M6.1821,20.0925A12.1282,12.1282,0,0,1,6.1777,15.93l1.9707.3423a10.1214,10.1214,0,0,0,.0035,3.4738Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M27.8447,16.2339a9.9019,9.9019,0,0,0-1.1953-3.2564l1.7285-1.0063a11.9029,11.9029,0,0,1,1.4361,3.9121Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M9.3313,13.0107l-1.7324-.999a12.01,12.01,0,0,1,2.6738-3.1931l1.2886,1.53A10.01,10.01,0,0,0,9.3313,13.0107Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M24.4094,10.3237a9.96,9.96,0,0,0-3.0088-1.7309l.68-1.8809a11.9491,11.9491,0,0,1,3.6118,2.0772Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M14.562,8.6064l-.6875-1.8779A12.1031,12.1031,0,0,1,18,6V8A10.0875,10.0875,0,0,0,14.562,8.6064Z"
      }
    }), createElement('polygon', {
      attrs: {
        "points": "11 2 2 2 2 11 4 11 4 4 11 4 11 2"
      }
    }), children]);
  }
};

module.exports = virtual_WatsonHealthSmoothingCursor32;
