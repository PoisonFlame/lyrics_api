import { _ as _objectSpread2, a as _defineProperty } from '../../_rollupPluginBabelHelpers-8169a350.js';
import { getAttributes } from '@carbon/icon-helpers';

var virtual_WatsonHealthPetImageB20 = {
  name: 'WatsonHealthPetImageB20',
  functional: true,
  // We use title as the prop name as it is not a valid attribute for an SVG
  // HTML element
  props: ['title'],
  render: function render(createElement, context) {
    var children = context.children,
        data = context.data,
        listeners = context.listeners,
        props = context.props;
    var attrs = getAttributes(_objectSpread2({
      width: '20',
      height: '20',
      viewBox: '0 0 32 32',
      preserveAspectRatio: 'xMidYMid meet',
      xmlns: 'http://www.w3.org/2000/svg',
      // Special case here, we need to coordinate that we are using title,
      // potentially, to get the right focus attributes
      title: props.title
    }, data.attrs));
    var svgData = {
      attrs: attrs,
      on: listeners
    };

    if (data.staticClass) {
      svgData.class = _defineProperty({}, data.staticClass, true);
    }

    if (data.class) {
      svgData.class = svgData.class || {}; // may be no static class

      svgData.class[data.class] = true;
    } // remove style set by getAttributes


    delete svgData.attrs.style; // combine incoming staticStyle, style with default willChange

    svgData.style = _objectSpread2({
      willChange: 'transform'
    }, data.staticStyle, {}, data.style);
    return createElement('svg', svgData, [props.title && createElement('title', null, props.title), createElement('rect', {
      attrs: {
        "width": "2",
        "height": "3",
        "x": "19",
        "y": "21"
      }
    }), createElement('rect', {
      attrs: {
        "width": "2",
        "height": "3",
        "x": "19"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "2",
        "x": "8",
        "y": "11"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "2",
        "x": "29",
        "y": "11"
      }
    }), createElement('rect', {
      attrs: {
        "width": "1.98",
        "height": "3",
        "x": "11.59",
        "y": "3.07",
        "transform": "rotate(-45 12.586 4.577)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "1.98",
        "height": "3",
        "x": "26.44",
        "y": "17.92",
        "transform": "rotate(-45 27.43 19.408)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "1.98",
        "x": "11.09",
        "y": "18.42",
        "transform": "rotate(-45 12.592 19.414)"
      }
    }), createElement('rect', {
      attrs: {
        "width": "3",
        "height": "1.98",
        "x": "25.93",
        "y": "3.58",
        "transform": "rotate(-45 27.423 4.57)"
      }
    }), createElement('path', {
      attrs: {
        "d": "M20,5a7,7,0,1,0,7,7A7,7,0,0,0,20,5Zm0,12A5,5,0,0,1,20,7Z"
      }
    }), createElement('path', {
      attrs: {
        "d": "M5,18H0V32H5a3,3,0,0,0,3-3V27a3,3,0,0,0-.78-2A3,3,0,0,0,8,23V21A3,3,0,0,0,5,18ZM2,20H5a1,1,0,0,1,1,1v2a1,1,0,0,1-1,1H2Zm4,9a1,1,0,0,1-1,1H2V26H5a1,1,0,0,1,1,1Z"
      }
    }), createElement('polygon', {
      attrs: {
        "points": "2 2 9 2 9 0 0 0 0 9 2 9 2 2"
      }
    }), children]);
  }
};

export default virtual_WatsonHealthPetImageB20;
